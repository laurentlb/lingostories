export class Story {
    constructor() {
        this.ink = null;
        this.name = null;
        this.lang = null;
    }

    async loadStory(name) {
        const storyData = await fetch(`stories/${name}.ink.json`, {cache: "no-cache"})
            .then(response => response.json());
        this.ink = new window.inkjs.Story(storyData);
        console.log(this.ink);

        this.metadata = await fetch(`stories/${name}.tl.json`, {cache: "no-cache"})
            .then(response => response.json());

    }

    Continue() {
        const line = this.ink.Continue();
        return this.processLine(line);
    }

    get canContinue() {
        return this.ink.canContinue;
    }

    get currentChoices() {
        return this.ink.currentChoices;
    }

    ChooseChoiceIndex(index) {
        this.ink.ChooseChoiceIndex(index);
    }

    ResetState() {
        this.ink.ResetState();
    }

    translateChoice(choice, lang) {
        if (!this.metadata["sentences"][choice.text]) {
            console.log("Missing translation for", choice.text);
            return choice.text;
        }
        return this.metadata["sentences"][choice.text][lang];
    }
    
    // Process a line generated by Ink; parse the line, add metadata and translations.
    processLine(line) {
        line = line.trim();

        if (line.startsWith("$image")) {
            const img = line.split(" ")[1];
            return {
                "img": img,
            };
        }

        if (line.startsWith("`")) {
            let text = line.substring(1, line.length - 1);
            let speaker = text.match(/^(\w*?):/);
            if (speaker) {
                speaker = speaker[1];
                text = text.substring(speaker.length + 1).trim();
            } else {
                speaker = null;
            }
            const result = {
                "speaker": speaker,
                "isTitle": false,
            };
            console.log("Processing line", text);
            console.log("translation", this.metadata["sentences"][text]);
            if (this.metadata["sentences"][text] === undefined) {
                console.log("Missing translation for", text);
                result[this.lang] = text;
                result["en"] = text;
                result["fr"] = text;
            } else {
                for (const [key, value] of Object.entries(this.metadata["sentences"][text])) {
                    result[key] = value;
                }
            }
            return result;
        }

        else {
            const text = line;
            const result = {
                "speaker": null,
                "isTitle": false,
            };
            result[this.lang] = text;
            result["en"] = text;
            result["fr"] = text;
            return result;
        }

        return line;
    }

}
